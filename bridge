#!/usr/bin/env python3

"""
Crappy Network Interface

Very minimal Container Network Interface plugin for FreeBSD

Basic usage:
    1. ONLY reads/honors /etc/cni/net.d/10-bridge.conflist
    2. Gets request
    3. ???
    4. Returns value

Command notes:
    ADD - creates only, no modification supported
    CHECK - unimplemented (not required by spec)
    DEL - not yet implemented
    VERSIONS - implemented

Notes:
    * IPv4 only
    * NAT, if desired, must be managed manually
    * All plugins in one! Does not delegate to plugins
    * full of non-compliant race conditions
    * portmap and tuning not supported

Todo (maybe?):
    * read configuration from /etc/cni/net.d (?)
    * plugins should be split out
    * no real error handling
    * tests would be good

Required parameters (CNI spec):
    CNI_COMMAND
    CNI_CONTAINERID
    CNI_IFNAME -- harcoded as "eth0"
    CNI_NETNS -- Required for ADD;
                 ignored in FreeBSD, which doesn't support network namespaces

We ignore the following parameters:
    CNI_ARGS
    CNI_PATH -- using /opt/cni/bin
"""

from abc import ABC, abstractmethod
import ipaddress
import json
import os
import random
import re
import subprocess
import sys


###############
# Global var(s)
###############

# Supported versions
# Pretty sure this plugin doesn"t actually support all these versions
versions_json = """
{
    "cniVersion": "1.0.0",
    "supportedVersions": [
        "0.3.1", "0.4.0", "1.0.0"
    ]
}
"""


#########
# Classes
#########

class CNIConfig:
    """
    Methods for reading CNI config values

    Probably should read this from /etc/cni/etc.d and parse the plugin input
    separately

    Reusing class for ADD (which seems like it should match /etc/cni/etc.d
    config?) and DEL (which is passed a different structure)

    prevResult should really be handled as a subclass/separate object
    """

    def __init__(self, input, request):
        self.input = input
        self.request = request
        self.config = CNIConfig.__read_input(input)
        self.cni_version = CNIConfig.cni_version()

        if self.request.command == "ADD":
            self.subnet = self.config["ipam"]["subnet"]
            self.gateway = self.config["ipam"]["gateway"]
            self.bridge = self.config["bridge"]
        else:
            self.subnet = None
            self.gateway = None
            self.bridge = None

        self.if_number = None

        if "prevResult" in self.config:
            # Probably not compliant
            try:
                self.if_number = self.config["prevResult"]["ips"][0]["interface"]
            except:
                if self.request.command == "DEL":
                    return_error(6, "Interface missing",
                        "Cannot read interface field in prevResult")

    def cni_version():
        versions = json.loads(versions_json)
        return versions["cniVersion"]

    def __read_input(input):
        try:
            input_config = json.loads(input)
        except:
            return_error(5, "Invalid input JSON", "Cannot parse STDIN")

        return input_config



class CNIRequest:
    """
    Interface for CNI environment variables

    Supported/required vars:
        CNI_COMMAND
        CNI_CONTAINERID
        CNI_IFNAME -- harcoded as "eth0"
        CNI_NETNS -- FreeBSD doesn"t use named network isolation domains (?)

    We ignore the following parameters:
        CNI_ARGS
        CNI_PATH -- using /opt/cni/bin
    """

    env_vars = ["CNI_COMMAND", "CNI_CONTAINERID", "CNI_IFNAME", "CNI_NETNS"]
    verbs = ["ADD", "DEL", "CHECK", "VERSION"]

    def __init__(self):
        self.noop = CNIRequest.noop()
        for ev in CNIRequest.env_vars:
            if ev == "CNI_COMMAND":
                self.command = self.__verb()
            elif ev == "CNI_CONTAINERID":
                self.container_id = self.__read_var( ev)
            elif ev == "CNI_IFNAME":
                self.ifname = self.__read_var(ev)
            elif ev == "CNI_NETNS":
                self.netns = self.__read_var(ev)

    def __verb(self):
        verb = os.environ.get("CNI_COMMAND")
        if verb is None or verb not in CNIRequest.verbs:
            return_error(4, "Invalid CNI_COMMAND",
                "CNI_COMMAND must be one of " + ", ".join(CNIRequest.verbs))
        else:
            return verb

    def __read_var(self, ev):
        # Sloppy way of handling sometimes-required params
        value = os.environ.get(ev)
        if self.command == "DEL" and ev == "CNI_NETNS" and value is None:
            # Not actually required for DEL
            return None
        elif value is None:
            # Required for ADD and CHECK
            return_error(4, ev + " invalid", ev + " parameter invalid")
        else:
            return value

    def noop():
        """
        If True, do not execute ifconfig/ip commands
        """

        v = os.environ.get("NOOP")
        if v == "true" or v == "True":
            return True
        else:
            return False


class NetIf(ABC):
    """
    Interface for OS-level network interface configuration
    """
    def __init__(self, cni, request):
        self.cni = cni
        self.request = request
        self.bridge = self.cni.bridge
        self.if_name = None

        if self.cni.if_number:
            self.if_number = self.cni.if_number
        else:
            self.if_number = None

        self.ip = None
        self.mac_addr = None

    @abstractmethod
    def create(self):
        pass

    @abstractmethod
    def delete(self):
        pass

    @abstractmethod
    def allocate(self):
        pass

    @abstractmethod
    def read_mac_addr(request, device):
        pass

    @abstractmethod
    def new_ip(self):
        pass

class FreeBSDNetIf(NetIf):
    """
    NetIf implementation for FreeBSD systems
    """

    # Prefix for virt network device
    interface_type = "tap"

    def __init__(self, cni, request):
        super().__init__(cni, request)


    def create(self):
        """
        Create the tap network device

        No error checking here

        Note that these commands are idempotent on FreeBSD;
        even if the device configurations already exist, as long as the
        configuration requests match, they will return true
        """
        self.allocate()
        self.new_ip()

        if not self.request.noop:
            try:
                bridge = self.bridge
                if_name = self.if_name
                ip = self.ip
                os.system(f'ifconfig {if_name} create')
                os.system(f'ifconfig {bridge} addm {if_name}')
                os.system(f'ifconfig {if_name} inet {ip}')
                os.system(f'ifconfig {if_name} up')
            except:
                return_error(11, "Failed to create device",
                        "Failed to create network device")


    def allocate(self):
        """
        Hardcoded stub for now. Should check something stateful for unused tap
        interface numbers

        TODO: check for unused tap interfaces
        """

        number = 2
        self.if_number = number
        self.if_name = FreeBSDNetIf.interface_type + str(number)


    def delete(self):
        """
        Delete the tap network device

        No error checking here

        Note that these commands are idempotent on FreeBSD;
        if the requested interface does not exist for any reason,
        they will still return true
        """

        if not self.request.noop:
            try:
                os.system("ifconfig " + self.if_name + " destroy")
            except:
                return_error(7, "Failed to delete device",
                        "Failed to delete network device")
        return True


    def read_mac_addr(request, device):
        """
        Parse device MAC address from ifconfig output
        """
        if not request.noop:
            try:
                ifconfig = subprocess.run(["ifconfig", device],
                        stdout=subprocess.PIPE)
                ifout = ifconfig.stdout.decode("UTF-8")

                em = re.compile(r"ether\s+(..:..:..:..:..:..)")
                m = em.search(ifout)
            except:
                return 1


    def new_ip(self):
        """
        Hardcoded stub for now. Should check something stateful for unused IPs
        in subnet range

        Todo: check for free IPs
        """

        # hardcode for now
        ip = "172.16.0.12"
        subnet = self.cni.subnet
        subnet_cidr = ipaddress.ip_network(subnet)
        netmask = str(subnet_cidr.netmask)
        cidr_nm = fix_netmask(netmask)
        cidr = f'{ip}/{cidr_nm}'
        self.ip = cidr



class AddResult:
    """
    Holds structure for ADD command results
    """
    def __init__(self, cni, request):
        self.cni_version = CNIConfig.cni_version()
        self.cni = cni
        self.request = request
        self.interfaces = [
                {
                    "name": "eth0",
                    "mac": gen_mac_addr(),
                    "sandbox": self.request.netns
                }
        ]
        self.ips = [
                {
                    "version": "4",
                    "gateway": self.cni.gateway
                }
        ]


    def set_address(self, address):
        self.ips[0]["address"] = address

    def set_interface(self, interface):
        self.ips[0]["interface"] = interface

    def json_output(self):
        result = {
                "cniVersion": self.cni_version,
                "interfaces": self.interfaces,
                "ips": self.ips
                }
        return json.dumps(result)



################
# Global methods (for now?)
################

def command_add(cni, request):
    """
    CNI ADD verb
    """

    result = AddResult(cni, request)
    netif = FreeBSDNetIf(cni, request)
    ip, if_number = host_local_add(netif)
    result.set_address(ip)
    result.set_interface(if_number)

    print(result.json_output())
    exit(0)


def command_del(cni, request):
    """
    CNI DEL verb
    """

    # Should only return 0 as errors shouldn't bubble up but *shrug*
    netif = FreeBSDNetIf(cni, request)
    code = host_local_del(netif)
    if code:
        exit(0)
    else:
        exit(1)


def command_check(cni, request):
    """
    CNI CHECK verb

    added in CNI v0.4

    required for CNI v1.0.0, at least for internal use?
    """

    print("Not implemented; CHECK disabled")
    exit(0)


def command_version():
    """
    CNI VERSION verb
    """

    print(versions_json)
    exit(0)


def return_error(code, msg, details):
    """
    Return the error message in format as shown at
    https://github.com/containernetworking/cni/blob/main/SPEC.md#Error

    This method makes no checks on its args
    """

    return_msg = (CNIConfig.cni_version(), code, msg, details)
    """
    {
      "cniVersion": {0},
      "code": {1},
      "msg": {2},
      "details": {3}
    }
    """

    print(return_msg, file=sys.stderr)
    exit(code)


def host_local_add(netif):
    """
    Create the interface
    """

    netif.create()
    return netif.ip, netif.if_number


def host_local_del(netif):
    """
    Delete the interface
    """

    return netif.delete()


def gen_mac_addr():
    """
    Generate random MAC address
    """

    hexes = [ 0x01, 0x02, 0x03,
            random.randint(0x00, 0xff),
            random.randint(0x00, 0xff),
            random.randint(0x00, 0xff) ]
    return ":".join(f"{n:02X}" for n in hexes)


def fix_netmask(octet_mask):
    """
    Convert xxx.xxx.xxx.xxx mask to /xx
    ipaddress module only return octet format
    """

    cidr = sum([bin(int(octet)).count("1") for octet in octet_mask.split(".")])
    return cidr



def main():
    request = CNIRequest()

    input_json = "".join(sys.stdin.readlines())
    # TODO validate passed config against /etc/cni/net.d conf(s)
    plugin = CNIConfig(input_json, request)

    if request.command == "ADD":
        command_add(plugin, request)
    elif request.command == "DEL":
        command_del(plugin, request)
    elif request.command == "CHECK":
        command_check(plugin, request)
    elif request.command == "VERSION":
        command_version()



if __name__ == "__main__":
    main()

